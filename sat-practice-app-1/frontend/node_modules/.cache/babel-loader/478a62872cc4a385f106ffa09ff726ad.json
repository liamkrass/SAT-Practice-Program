{"ast":null,"code":"/**\n * Money utility functions for consistent currency handling in casino games\n * Prevents floating-point precision issues and ensures clean monetary values\n */\n\n/**\n * Rounds a number to 2 decimal places (cents precision)\n * Uses banker's rounding (round half to even) for fairness\n */\nexport const roundMoney = amount => {\n  return Math.round((amount + Number.EPSILON) * 100) / 100;\n};\n\n/**\n * Formats money for display with proper currency formatting\n */\nexport const formatMoney = amount => {\n  return roundMoney(amount).toFixed(2);\n};\n\n/**\n * Safely adds two money amounts with proper rounding\n */\nexport const addMoney = (a, b) => {\n  return roundMoney(a + b);\n};\n\n/**\n * Safely subtracts two money amounts with proper rounding\n */\nexport const subtractMoney = (a, b) => {\n  return roundMoney(a - b);\n};\n\n/**\n * Safely multiplies money by a factor with proper rounding\n */\nexport const multiplyMoney = (amount, multiplier) => {\n  return roundMoney(amount * multiplier);\n};\n\n/**\n * Safely divides money with proper rounding\n */\nexport const divideMoney = (amount, divisor) => {\n  if (divisor === 0) {\n    throw new Error('Cannot divide money by zero');\n  }\n  return roundMoney(amount / divisor);\n};\n\n/**\n * Validates that a money amount is valid (non-negative, properly rounded)\n */\nexport const isValidMoney = amount => {\n  return amount >= 0 && roundMoney(amount) === amount;\n};\n\n/**\n * Ensures money amount is valid and rounds if necessary\n */\nexport const sanitizeMoney = amount => {\n  return Math.max(0, roundMoney(amount));\n};\n\n/**\n * Parses user input to a valid money amount\n */\nexport const parseMoneyInput = input => {\n  const parsed = parseFloat(input);\n  if (isNaN(parsed)) {\n    return 0;\n  }\n  return sanitizeMoney(parsed);\n};\n\n/**\n * Calculates percentage of money amount with proper rounding\n */\nexport const percentageOfMoney = (amount, percentage) => {\n  return roundMoney(amount * (percentage / 100));\n};","map":{"version":3,"names":["roundMoney","amount","Math","round","Number","EPSILON","formatMoney","toFixed","addMoney","a","b","subtractMoney","multiplyMoney","multiplier","divideMoney","divisor","Error","isValidMoney","sanitizeMoney","max","parseMoneyInput","input","parsed","parseFloat","isNaN","percentageOfMoney","percentage"],"sources":["/Users/liamkrass/Documents/satProjectV2/sat-practice-app-1/frontend/src/utils/money.ts"],"sourcesContent":["/**\n * Money utility functions for consistent currency handling in casino games\n * Prevents floating-point precision issues and ensures clean monetary values\n */\n\n/**\n * Rounds a number to 2 decimal places (cents precision)\n * Uses banker's rounding (round half to even) for fairness\n */\nexport const roundMoney = (amount: number): number => {\n  return Math.round((amount + Number.EPSILON) * 100) / 100;\n};\n\n/**\n * Formats money for display with proper currency formatting\n */\nexport const formatMoney = (amount: number): string => {\n  return roundMoney(amount).toFixed(2);\n};\n\n/**\n * Safely adds two money amounts with proper rounding\n */\nexport const addMoney = (a: number, b: number): number => {\n  return roundMoney(a + b);\n};\n\n/**\n * Safely subtracts two money amounts with proper rounding\n */\nexport const subtractMoney = (a: number, b: number): number => {\n  return roundMoney(a - b);\n};\n\n/**\n * Safely multiplies money by a factor with proper rounding\n */\nexport const multiplyMoney = (amount: number, multiplier: number): number => {\n  return roundMoney(amount * multiplier);\n};\n\n/**\n * Safely divides money with proper rounding\n */\nexport const divideMoney = (amount: number, divisor: number): number => {\n  if (divisor === 0) {\n    throw new Error('Cannot divide money by zero');\n  }\n  return roundMoney(amount / divisor);\n};\n\n/**\n * Validates that a money amount is valid (non-negative, properly rounded)\n */\nexport const isValidMoney = (amount: number): boolean => {\n  return amount >= 0 && roundMoney(amount) === amount;\n};\n\n/**\n * Ensures money amount is valid and rounds if necessary\n */\nexport const sanitizeMoney = (amount: number): number => {\n  return Math.max(0, roundMoney(amount));\n};\n\n/**\n * Parses user input to a valid money amount\n */\nexport const parseMoneyInput = (input: string): number => {\n  const parsed = parseFloat(input);\n  if (isNaN(parsed)) {\n    return 0;\n  }\n  return sanitizeMoney(parsed);\n};\n\n/**\n * Calculates percentage of money amount with proper rounding\n */\nexport const percentageOfMoney = (amount: number, percentage: number): number => {\n  return roundMoney(amount * (percentage / 100));\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMA,UAAU,GAAIC,MAAc,IAAa;EACpD,OAAOC,IAAI,CAACC,KAAK,CAAC,CAACF,MAAM,GAAGG,MAAM,CAACC,OAAO,IAAI,GAAG,CAAC,GAAG,GAAG;AAC1D,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAIL,MAAc,IAAa;EACrD,OAAOD,UAAU,CAACC,MAAM,CAAC,CAACM,OAAO,CAAC,CAAC,CAAC;AACtC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAACC,CAAS,EAAEC,CAAS,KAAa;EACxD,OAAOV,UAAU,CAACS,CAAC,GAAGC,CAAC,CAAC;AAC1B,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAGA,CAACF,CAAS,EAAEC,CAAS,KAAa;EAC7D,OAAOV,UAAU,CAACS,CAAC,GAAGC,CAAC,CAAC;AAC1B,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAME,aAAa,GAAGA,CAACX,MAAc,EAAEY,UAAkB,KAAa;EAC3E,OAAOb,UAAU,CAACC,MAAM,GAAGY,UAAU,CAAC;AACxC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAGA,CAACb,MAAc,EAAEc,OAAe,KAAa;EACtE,IAAIA,OAAO,KAAK,CAAC,EAAE;IACjB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAChD;EACA,OAAOhB,UAAU,CAACC,MAAM,GAAGc,OAAO,CAAC;AACrC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAME,YAAY,GAAIhB,MAAc,IAAc;EACvD,OAAOA,MAAM,IAAI,CAAC,IAAID,UAAU,CAACC,MAAM,CAAC,KAAKA,MAAM;AACrD,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMiB,aAAa,GAAIjB,MAAc,IAAa;EACvD,OAAOC,IAAI,CAACiB,GAAG,CAAC,CAAC,EAAEnB,UAAU,CAACC,MAAM,CAAC,CAAC;AACxC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMmB,eAAe,GAAIC,KAAa,IAAa;EACxD,MAAMC,MAAM,GAAGC,UAAU,CAACF,KAAK,CAAC;EAChC,IAAIG,KAAK,CAACF,MAAM,CAAC,EAAE;IACjB,OAAO,CAAC;EACV;EACA,OAAOJ,aAAa,CAACI,MAAM,CAAC;AAC9B,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMG,iBAAiB,GAAGA,CAACxB,MAAc,EAAEyB,UAAkB,KAAa;EAC/E,OAAO1B,UAAU,CAACC,MAAM,IAAIyB,UAAU,GAAG,GAAG,CAAC,CAAC;AAChD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}