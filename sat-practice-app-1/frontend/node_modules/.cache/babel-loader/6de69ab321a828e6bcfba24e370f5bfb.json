{"ast":null,"code":"var _jsxFileName = \"/Users/liamkrass/Documents/satProjectV2/sat-practice-app-1/frontend/src/components/VisualElements.tsx\";\n// VisualElements.tsx - React component for rendering question visuals\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const VisualElementRenderer = ({\n  visual,\n  className = \"\"\n}) => {\n  // Helper: Try to parse a line graph from description\n  const tryRenderLineGraphFromDescription = desc => {\n    // Example desc: 'A line graph on an xy-plane with a grid. The x-axis ranges from -2 to 10. The y-axis ranges from -2 to 10. There are two lines graphed. The first line passes through the points (0, 8) and (8, 0). The second line passes through the points (0, 4) and (8, 0).'\n    const xRangeMatch = desc.match(/x-axis ranges from ([\\-\\d\\.]+) to ([\\-\\d\\.]+)/i);\n    const yRangeMatch = desc.match(/y-axis ranges from ([\\-\\d\\.]+) to ([\\-\\d\\.]+)/i);\n    const lineMatches = Array.from(desc.matchAll(/line passes through the points? \\(([^)]+)\\) and \\(([^)]+)\\)/gi));\n    if (!xRangeMatch || !yRangeMatch || lineMatches.length === 0) return null;\n    const xMin = parseFloat(xRangeMatch[1]);\n    const xMax = parseFloat(xRangeMatch[2]);\n    const yMin = parseFloat(yRangeMatch[1]);\n    const yMax = parseFloat(yRangeMatch[2]);\n    const width = 220,\n      height = 220,\n      pad = 32;\n    // Map (x, y) to SVG coords\n    const map = (x, y) => [pad + (x - xMin) / (xMax - xMin) * (width - 2 * pad), height - (pad + (y - yMin) / (yMax - yMin) * (height - 2 * pad))];\n    // Parse lines\n    const lines = lineMatches.map(match => {\n      const [x1, y1] = match[1].split(',').map(Number);\n      const [x2, y2] = match[2].split(',').map(Number);\n      return {\n        x1,\n        y1,\n        x2,\n        y2\n      };\n    });\n    // SVG\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: width,\n      height: height,\n      style: {\n        background: '#f8fafc',\n        border: '1px solid #e5e7eb',\n        borderRadius: 8\n      },\n      children: [[...Array(11)].map((_, i) => /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: pad,\n        x2: width - pad,\n        y1: pad + i * (height - 2 * pad) / 10,\n        y2: pad + i * (height - 2 * pad) / 10,\n        stroke: \"#e0e7ef\",\n        strokeWidth: 1\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)), [...Array(11)].map((_, i) => /*#__PURE__*/_jsxDEV(\"line\", {\n        y1: pad,\n        y2: height - pad,\n        x1: pad + i * (width - 2 * pad) / 10,\n        x2: pad + i * (width - 2 * pad) / 10,\n        stroke: \"#e0e7ef\",\n        strokeWidth: 1\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: pad,\n        x2: width - pad,\n        y1: height - pad,\n        y2: height - pad,\n        stroke: \"#222\",\n        strokeWidth: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: pad,\n        x2: pad,\n        y1: pad,\n        y2: height - pad,\n        stroke: \"#222\",\n        strokeWidth: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), lines.map((line, i) => {\n        const [x1, y1] = map(line.x1, line.y1);\n        const [x2, y2] = map(line.x2, line.y2);\n        const color = i === 0 ? '#2563eb' : '#f59e42';\n        return /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2,\n          stroke: color,\n          strokeWidth: 3\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 18\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: width / 2,\n        y: height - 4,\n        textAnchor: \"middle\",\n        fontSize: \"12\",\n        fill: \"#222\",\n        children: \"x\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: 10,\n        y: height / 2,\n        textAnchor: \"middle\",\n        fontSize: \"12\",\n        fill: \"#222\",\n        transform: `rotate(-90 10,${height / 2})`,\n        children: \"y\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Helper: Render structured graph data\n  const renderStructuredGraph = data => {\n    const {\n      xRange,\n      yRange,\n      lines\n    } = data;\n    const [xMin, xMax] = xRange;\n    const [yMin, yMax] = yRange;\n    const width = 300,\n      height = 300,\n      pad = 40;\n\n    // Map (x, y) to SVG coords\n    const map = (x, y) => [pad + (x - xMin) / (xMax - xMin) * (width - 2 * pad), height - (pad + (y - yMin) / (yMax - yMin) * (height - 2 * pad))];\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: width,\n      height: height,\n      style: {\n        background: '#f8fafc',\n        border: '1px solid #e5e7eb',\n        borderRadius: 8\n      },\n      children: [[...Array(11)].map((_, i) => /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: pad,\n        x2: width - pad,\n        y1: pad + i * (height - 2 * pad) / 10,\n        y2: pad + i * (height - 2 * pad) / 10,\n        stroke: \"#e0e7ef\",\n        strokeWidth: 1\n      }, `h${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)), [...Array(11)].map((_, i) => /*#__PURE__*/_jsxDEV(\"line\", {\n        y1: pad,\n        y2: height - pad,\n        x1: pad + i * (width - 2 * pad) / 10,\n        x2: pad + i * (width - 2 * pad) / 10,\n        stroke: \"#e0e7ef\",\n        strokeWidth: 1\n      }, `v${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: pad,\n        x2: width - pad,\n        y1: height - pad,\n        y2: height - pad,\n        stroke: \"#222\",\n        strokeWidth: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: pad,\n        x2: pad,\n        y1: pad,\n        y2: height - pad,\n        stroke: \"#222\",\n        strokeWidth: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), lines.map((line, i) => {\n        const [x1, y1] = map(line.points[0][0], line.points[0][1]);\n        const [x2, y2] = map(line.points[1][0], line.points[1][1]);\n        return /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2,\n          stroke: line.color,\n          strokeWidth: 3\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 18\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: width / 2,\n        y: height - 4,\n        textAnchor: \"middle\",\n        fontSize: \"12\",\n        fill: \"#222\",\n        children: \"x\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: 10,\n        y: height / 2,\n        textAnchor: \"middle\",\n        fontSize: \"12\",\n        fill: \"#222\",\n        transform: `rotate(-90 10,${height / 2})`,\n        children: \"y\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: pad,\n        y: height - pad + 15,\n        textAnchor: \"middle\",\n        fontSize: \"10\",\n        fill: \"#666\",\n        children: xMin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: width - pad,\n        y: height - pad + 15,\n        textAnchor: \"middle\",\n        fontSize: \"10\",\n        fill: \"#666\",\n        children: xMax\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: pad - 15,\n        y: height - pad,\n        textAnchor: \"middle\",\n        fontSize: \"10\",\n        fill: \"#666\",\n        children: yMin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: pad - 15,\n        y: pad,\n        textAnchor: \"middle\",\n        fontSize: \"10\",\n        fill: \"#666\",\n        children: yMax\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Helper: Render structured table data\n  const renderStructuredTable = data => {\n    const {\n      headers,\n      rows\n    } = data;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `visual-table ${className}`,\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"border-collapse border border-gray-300 mx-auto\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: headers.map((header, i) => /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"border border-gray-300 px-4 py-2 bg-gray-100 font-semibold\",\n              children: header\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: rows.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: row.map((cell, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-300 px-4 py-2 text-center\",\n              children: cell\n            }, j, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 19\n            }, this))\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Helper: Render multiple choice tables\n  const renderMultipleChoiceTables = tables => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `visual-multiple-tables ${className}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-2 gap-4\",\n        children: tables.map((table, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"font-semibold mb-2\",\n            children: table.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"border-collapse border border-gray-300 mx-auto\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: table.headers.map((header, j) => /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-3 py-1 bg-gray-100 text-sm font-semibold\",\n                  children: header\n                }, j, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: table.rows.map((row, j) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: row.map((cell, k) => /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"border border-gray-300 px-3 py-1 text-center text-sm\",\n                  children: cell\n                }, k, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 25\n                }, this))\n              }, j, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 15\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this);\n  };\n  const renderVisual = () => {\n    var _visual$data;\n    switch (visual.type) {\n      case 'graph':\n      case 'chart':\n      case 'diagram':\n        if (visual.svg) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `visual-svg ${className}`,\n            dangerouslySetInnerHTML: {\n              __html: visual.svg\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this);\n        }\n        // Check if we have structured graph data\n        if (visual.data && visual.data.xRange && visual.data.yRange && visual.data.lines) {\n          return renderStructuredGraph(visual.data);\n        }\n        // Try to auto-generate SVG from description\n        const autoSVG = tryRenderLineGraphFromDescription(visual.description);\n        if (autoSVG) return autoSVG;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `visual-placeholder ${className}`,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-600\",\n            children: visual.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this);\n      case 'table':\n        // Check if we have structured table data\n        if (visual.data) {\n          if (visual.data.multipleChoice && visual.data.tables) {\n            return renderMultipleChoiceTables(visual.data.tables);\n          }\n          if (visual.data.headers && visual.data.rows) {\n            return renderStructuredTable(visual.data);\n          }\n        }\n        // Legacy table rendering\n        if ((_visual$data = visual.data) !== null && _visual$data !== void 0 && _visual$data.table) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `visual-table ${className}`,\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"border-collapse border border-gray-300\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: visual.data.table.headers.map((header, i) => /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"border border-gray-300 px-4 py-2 bg-gray-100\",\n                    children: header\n                  }, i, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 225,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 223,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: visual.data.table.rows.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: row.map((cell, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"border border-gray-300 px-4 py-2 text-center\",\n                    children: cell\n                  }, j, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 235,\n                    columnNumber: 25\n                  }, this))\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 233,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this);\n        }\n        // Try to parse a table from the description\n        const tableFromDesc = (() => {\n          // Example: 'A table with two columns, x and y. The rows contain the following pairs of values: (18, 130), (23, 160), (26, 178).'\n          const colMatch = visual.description.match(/table with (\\w+) columns?,? ([^\\.]+)\\./i);\n          let headers = [];\n          if (colMatch) {\n            headers = colMatch[2].split(/,| and /).map(h => h.trim());\n          }\n          const rowMatch = visual.description.match(/rows contain the following pairs of values: ([^\\.]+)\\./i);\n          let rows = [];\n          if (rowMatch) {\n            rows = rowMatch[1].split(/\\),/).map(pair => {\n              const clean = pair.replace(/[()]/g, '').replace(/\\.$/, '').trim();\n              return clean.split(',').map(v => v.trim());\n            });\n          }\n          if (headers.length && rows.length) {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `visual-table ${className}`,\n              children: /*#__PURE__*/_jsxDEV(\"table\", {\n                className: \"border-collapse border border-gray-300\",\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: headers.map((header, i) => /*#__PURE__*/_jsxDEV(\"th\", {\n                      className: \"border border-gray-300 px-4 py-2 bg-gray-100\",\n                      children: header\n                    }, i, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 269,\n                      columnNumber: 25\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 267,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 266,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  children: rows.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: row.map((cell, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2 text-center\",\n                      children: cell\n                    }, j, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 277,\n                      columnNumber: 27\n                    }, this))\n                  }, i, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 275,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 273,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 15\n            }, this);\n          }\n          return null;\n        })();\n        if (tableFromDesc) return tableFromDesc;\n        break;\n      case 'equation':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `visual-equation ${className}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"math-display text-lg font-mono\",\n            children: visual.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `visual-description ${className}`,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm italic text-gray-600\",\n            children: visual.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"visual-element-container my-4\",\n    children: renderVisual()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 310,\n    columnNumber: 5\n  }, this);\n};\n_c = VisualElementRenderer;\nexport default VisualElementRenderer;\nvar _c;\n$RefreshReg$(_c, \"VisualElementRenderer\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","VisualElementRenderer","visual","className","tryRenderLineGraphFromDescription","desc","xRangeMatch","match","yRangeMatch","lineMatches","Array","from","matchAll","length","xMin","parseFloat","xMax","yMin","yMax","width","height","pad","map","x","y","lines","x1","y1","split","Number","x2","y2","style","background","border","borderRadius","children","_","i","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","line","color","textAnchor","fontSize","fill","transform","renderStructuredGraph","data","xRange","yRange","points","renderStructuredTable","headers","rows","header","row","cell","j","renderMultipleChoiceTables","tables","table","label","k","renderVisual","_visual$data","type","svg","dangerouslySetInnerHTML","__html","autoSVG","description","multipleChoice","tableFromDesc","colMatch","h","trim","rowMatch","pair","clean","replace","v","_c","$RefreshReg$"],"sources":["/Users/liamkrass/Documents/satProjectV2/sat-practice-app-1/frontend/src/components/VisualElements.tsx"],"sourcesContent":["// VisualElements.tsx - React component for rendering question visuals\nimport React from 'react';\n\ninterface VisualElement {\n  type: 'graph' | 'table' | 'diagram' | 'chart' | 'equation';\n  description: string;\n  data?: any;\n  svg?: string;\n}\n\ninterface VisualElementProps {\n  visual: VisualElement;\n  className?: string;\n}\n\nexport const VisualElementRenderer: React.FC<VisualElementProps> = ({ \n  visual, \n  className = \"\" \n}) => {\n  // Helper: Try to parse a line graph from description\n  const tryRenderLineGraphFromDescription = (desc: string) => {\n    // Example desc: 'A line graph on an xy-plane with a grid. The x-axis ranges from -2 to 10. The y-axis ranges from -2 to 10. There are two lines graphed. The first line passes through the points (0, 8) and (8, 0). The second line passes through the points (0, 4) and (8, 0).'\n    const xRangeMatch = desc.match(/x-axis ranges from ([\\-\\d\\.]+) to ([\\-\\d\\.]+)/i);\n    const yRangeMatch = desc.match(/y-axis ranges from ([\\-\\d\\.]+) to ([\\-\\d\\.]+)/i);\n    const lineMatches = Array.from(desc.matchAll(/line passes through the points? \\(([^)]+)\\) and \\(([^)]+)\\)/gi));\n    if (!xRangeMatch || !yRangeMatch || lineMatches.length === 0) return null;\n    const xMin = parseFloat(xRangeMatch[1]);\n    const xMax = parseFloat(xRangeMatch[2]);\n    const yMin = parseFloat(yRangeMatch[1]);\n    const yMax = parseFloat(yRangeMatch[2]);\n    const width = 220, height = 220, pad = 32;\n    // Map (x, y) to SVG coords\n    const map = (x: number, y: number) => [\n      pad + ((x - xMin) / (xMax - xMin)) * (width - 2 * pad),\n      height - (pad + ((y - yMin) / (yMax - yMin)) * (height - 2 * pad))\n    ];\n    // Parse lines\n    const lines = lineMatches.map(match => {\n      const [x1, y1] = match[1].split(',').map(Number);\n      const [x2, y2] = match[2].split(',').map(Number);\n      return { x1, y1, x2, y2 };\n    });\n    // SVG\n    return (\n      <svg width={width} height={height} style={{ background: '#f8fafc', border: '1px solid #e5e7eb', borderRadius: 8 }}>\n        {/* Grid lines */}\n        {[...Array(11)].map((_, i) => (\n          <line key={i} x1={pad} x2={width-pad} y1={pad + i*(height-2*pad)/10} y2={pad + i*(height-2*pad)/10} stroke=\"#e0e7ef\" strokeWidth={1}/>\n        ))}\n        {[...Array(11)].map((_, i) => (\n          <line key={i} y1={pad} y2={height-pad} x1={pad + i*(width-2*pad)/10} x2={pad + i*(width-2*pad)/10} stroke=\"#e0e7ef\" strokeWidth={1}/>\n        ))}\n        {/* Axes */}\n        <line x1={pad} x2={width-pad} y1={height-pad} y2={height-pad} stroke=\"#222\" strokeWidth={2}/>\n        <line x1={pad} x2={pad} y1={pad} y2={height-pad} stroke=\"#222\" strokeWidth={2}/>\n        {/* Lines */}\n        {lines.map((line, i) => {\n          const [x1, y1] = map(line.x1, line.y1);\n          const [x2, y2] = map(line.x2, line.y2);\n          const color = i === 0 ? '#2563eb' : '#f59e42';\n          return <line key={i} x1={x1} y1={y1} x2={x2} y2={y2} stroke={color} strokeWidth={3}/>;\n        })}\n        {/* Axis labels */}\n        <text x={width/2} y={height-4} textAnchor=\"middle\" fontSize=\"12\" fill=\"#222\">x</text>\n        <text x={10} y={height/2} textAnchor=\"middle\" fontSize=\"12\" fill=\"#222\" transform={`rotate(-90 10,${height/2})`}>y</text>\n      </svg>\n    );\n  };\n\n  // Helper: Render structured graph data\n  const renderStructuredGraph = (data: any) => {\n    const { xRange, yRange, lines } = data;\n    const [xMin, xMax] = xRange;\n    const [yMin, yMax] = yRange;\n    const width = 300, height = 300, pad = 40;\n    \n    // Map (x, y) to SVG coords\n    const map = (x: number, y: number) => [\n      pad + ((x - xMin) / (xMax - xMin)) * (width - 2 * pad),\n      height - (pad + ((y - yMin) / (yMax - yMin)) * (height - 2 * pad))\n    ];\n    \n    return (\n      <svg width={width} height={height} style={{ background: '#f8fafc', border: '1px solid #e5e7eb', borderRadius: 8 }}>\n        {/* Grid lines */}\n        {[...Array(11)].map((_, i) => (\n          <line key={`h${i}`} x1={pad} x2={width-pad} y1={pad + i*(height-2*pad)/10} y2={pad + i*(height-2*pad)/10} stroke=\"#e0e7ef\" strokeWidth={1}/>\n        ))}\n        {[...Array(11)].map((_, i) => (\n          <line key={`v${i}`} y1={pad} y2={height-pad} x1={pad + i*(width-2*pad)/10} x2={pad + i*(width-2*pad)/10} stroke=\"#e0e7ef\" strokeWidth={1}/>\n        ))}\n        {/* Axes */}\n        <line x1={pad} x2={width-pad} y1={height-pad} y2={height-pad} stroke=\"#222\" strokeWidth={2}/>\n        <line x1={pad} x2={pad} y1={pad} y2={height-pad} stroke=\"#222\" strokeWidth={2}/>\n        {/* Lines */}\n        {lines.map((line: any, i: number) => {\n          const [x1, y1] = map(line.points[0][0], line.points[0][1]);\n          const [x2, y2] = map(line.points[1][0], line.points[1][1]);\n          return <line key={i} x1={x1} y1={y1} x2={x2} y2={y2} stroke={line.color} strokeWidth={3}/>;\n        })}\n        {/* Axis labels */}\n        <text x={width/2} y={height-4} textAnchor=\"middle\" fontSize=\"12\" fill=\"#222\">x</text>\n        <text x={10} y={height/2} textAnchor=\"middle\" fontSize=\"12\" fill=\"#222\" transform={`rotate(-90 10,${height/2})`}>y</text>\n        {/* Scale indicators */}\n        <text x={pad} y={height-pad+15} textAnchor=\"middle\" fontSize=\"10\" fill=\"#666\">{xMin}</text>\n        <text x={width-pad} y={height-pad+15} textAnchor=\"middle\" fontSize=\"10\" fill=\"#666\">{xMax}</text>\n        <text x={pad-15} y={height-pad} textAnchor=\"middle\" fontSize=\"10\" fill=\"#666\">{yMin}</text>\n        <text x={pad-15} y={pad} textAnchor=\"middle\" fontSize=\"10\" fill=\"#666\">{yMax}</text>\n      </svg>\n    );\n  };\n\n  // Helper: Render structured table data\n  const renderStructuredTable = (data: any) => {\n    const { headers, rows } = data;\n    return (\n      <div className={`visual-table ${className}`}>\n        <table className=\"border-collapse border border-gray-300 mx-auto\">\n          <thead>\n            <tr>\n              {headers.map((header: string, i: number) => (\n                <th key={i} className=\"border border-gray-300 px-4 py-2 bg-gray-100 font-semibold\">\n                  {header}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {rows.map((row: string[], i: number) => (\n              <tr key={i}>\n                {row.map((cell: string, j: number) => (\n                  <td key={j} className=\"border border-gray-300 px-4 py-2 text-center\">\n                    {cell}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n\n  // Helper: Render multiple choice tables\n  const renderMultipleChoiceTables = (tables: any[]) => {\n    return (\n      <div className={`visual-multiple-tables ${className}`}>\n        <div className=\"grid grid-cols-2 gap-4\">\n          {tables.map((table: any, i: number) => (\n            <div key={i} className=\"text-center\">\n              <h4 className=\"font-semibold mb-2\">{table.label}</h4>\n              <table className=\"border-collapse border border-gray-300 mx-auto\">\n                <thead>\n                  <tr>\n                    {table.headers.map((header: string, j: number) => (\n                      <th key={j} className=\"border border-gray-300 px-3 py-1 bg-gray-100 text-sm font-semibold\">\n                        {header}\n                      </th>\n                    ))}\n                  </tr>\n                </thead>\n                <tbody>\n                  {table.rows.map((row: string[], j: number) => (\n                    <tr key={j}>\n                      {row.map((cell: string, k: number) => (\n                        <td key={k} className=\"border border-gray-300 px-3 py-1 text-center text-sm\">\n                          {cell}\n                        </td>\n                      ))}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  const renderVisual = () => {\n    switch (visual.type) {\n      case 'graph':\n      case 'chart':\n      case 'diagram':\n        if (visual.svg) {\n          return (\n            <div \n              className={`visual-svg ${className}`}\n              dangerouslySetInnerHTML={{ __html: visual.svg }}\n            />\n          );\n        }\n        // Check if we have structured graph data\n        if (visual.data && visual.data.xRange && visual.data.yRange && visual.data.lines) {\n          return renderStructuredGraph(visual.data);\n        }\n        // Try to auto-generate SVG from description\n        const autoSVG = tryRenderLineGraphFromDescription(visual.description);\n        if (autoSVG) return autoSVG;\n        return (\n          <div className={`visual-placeholder ${className}`}>\n            <p className=\"text-sm text-gray-600\">{visual.description}</p>\n          </div>\n        );\n        \n      case 'table':\n        // Check if we have structured table data\n        if (visual.data) {\n          if (visual.data.multipleChoice && visual.data.tables) {\n            return renderMultipleChoiceTables(visual.data.tables);\n          }\n          if (visual.data.headers && visual.data.rows) {\n            return renderStructuredTable(visual.data);\n          }\n        }\n        // Legacy table rendering\n        if (visual.data?.table) {\n          return (\n            <div className={`visual-table ${className}`}>\n              <table className=\"border-collapse border border-gray-300\">\n                <thead>\n                  <tr>\n                    {visual.data.table.headers.map((header: string, i: number) => (\n                      <th key={i} className=\"border border-gray-300 px-4 py-2 bg-gray-100\">\n                        {header}\n                      </th>\n                    ))}\n                  </tr>\n                </thead>\n                <tbody>\n                  {visual.data.table.rows.map((row: any[], i: number) => (\n                    <tr key={i}>\n                      {row.map((cell: any, j: number) => (\n                        <td key={j} className=\"border border-gray-300 px-4 py-2 text-center\">\n                          {cell}\n                        </td>\n                      ))}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          );\n        }\n        // Try to parse a table from the description\n        const tableFromDesc = (() => {\n          // Example: 'A table with two columns, x and y. The rows contain the following pairs of values: (18, 130), (23, 160), (26, 178).'\n          const colMatch = visual.description.match(/table with (\\w+) columns?,? ([^\\.]+)\\./i);\n          let headers: string[] = [];\n          if (colMatch) {\n            headers = colMatch[2].split(/,| and /).map(h => h.trim());\n          }\n          const rowMatch = visual.description.match(/rows contain the following pairs of values: ([^\\.]+)\\./i);\n          let rows: string[][] = [];\n          if (rowMatch) {\n            rows = rowMatch[1].split(/\\),/).map(pair => {\n              const clean = pair.replace(/[()]/g, '').replace(/\\.$/, '').trim();\n              return clean.split(',').map(v => v.trim());\n            });\n          }\n          if (headers.length && rows.length) {\n            return (\n              <div className={`visual-table ${className}`}>\n                <table className=\"border-collapse border border-gray-300\">\n                  <thead>\n                    <tr>\n                      {headers.map((header, i) => (\n                        <th key={i} className=\"border border-gray-300 px-4 py-2 bg-gray-100\">{header}</th>\n                      ))}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {rows.map((row, i) => (\n                      <tr key={i}>\n                        {row.map((cell, j) => (\n                          <td key={j} className=\"border border-gray-300 px-4 py-2 text-center\">{cell}</td>\n                        ))}\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            );\n          }\n          return null;\n        })();\n        if (tableFromDesc) return tableFromDesc;\n        break;\n        \n      case 'equation':\n        return (\n          <div className={`visual-equation ${className}`}>\n            <div className=\"math-display text-lg font-mono\">\n              {visual.description}\n            </div>\n          </div>\n        );\n        \n      default:\n        return (\n          <div className={`visual-description ${className}`}>\n            <p className=\"text-sm italic text-gray-600\">{visual.description}</p>\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div className=\"visual-element-container my-4\">\n      {renderVisual()}\n    </div>\n  );\n};\n\nexport default VisualElementRenderer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}