{"ast":null,"code":"/**\n * Money utility functions for consistent currency handling in casino games\n * Prevents floating-point precision issues and ensures clean monetary values\n *//**\n * Rounds a number to 2 decimal places (cents precision)\n * Uses banker's rounding (round half to even) for fairness\n */export const roundMoney=amount=>{return Math.round((amount+Number.EPSILON)*100)/100;};/**\n * Formats money for display with proper currency formatting\n */export const formatMoney=amount=>{return roundMoney(amount).toFixed(2);};/**\n * Safely adds two money amounts with proper rounding\n */export const addMoney=(a,b)=>{return roundMoney(a+b);};/**\n * Safely subtracts two money amounts with proper rounding\n */export const subtractMoney=(a,b)=>{return roundMoney(a-b);};/**\n * Safely multiplies money by a factor with proper rounding\n */export const multiplyMoney=(amount,multiplier)=>{return roundMoney(amount*multiplier);};/**\n * Safely divides money with proper rounding\n */export const divideMoney=(amount,divisor)=>{if(divisor===0){throw new Error('Cannot divide money by zero');}return roundMoney(amount/divisor);};/**\n * Validates that a money amount is valid (non-negative, properly rounded)\n */export const isValidMoney=amount=>{return amount>=0&&roundMoney(amount)===amount;};/**\n * Ensures money amount is valid and rounds if necessary\n */export const sanitizeMoney=amount=>{return Math.max(0,roundMoney(amount));};/**\n * Parses user input to a valid money amount\n */export const parseMoneyInput=input=>{const parsed=parseFloat(input);if(isNaN(parsed)){return 0;}return sanitizeMoney(parsed);};/**\n * Calculates percentage of money amount with proper rounding\n */export const percentageOfMoney=(amount,percentage)=>{return roundMoney(amount*(percentage/100));};","map":null,"metadata":{},"sourceType":"module"}