{"ast":null,"code":"// Utility for tracking answered questions and progress in localStorage\n\nexport const getAnsweredQuestions = () => {\n  // Legacy format support\n  const data = localStorage.getItem('answeredQuestions');\n  return data ? JSON.parse(data) : [];\n};\nexport const getAnsweredQuestionsDetailed = () => {\n  const data = localStorage.getItem('answeredQuestionsDetailed');\n  return data ? JSON.parse(data) : [];\n};\nexport const getAnsweredQuestionsMap = () => {\n  const detailed = getAnsweredQuestionsDetailed();\n  const map = {};\n  detailed.forEach(item => {\n    map[item.id] = item.answer;\n  });\n  return map;\n};\nexport const saveAnsweredQuestion = (id, answer) => {\n  console.log(`saveAnsweredQuestion called: id=\"${id}\", answer=\"${answer}\"`);\n\n  // Save to legacy format for backward compatibility\n  const answered = getAnsweredQuestions();\n  if (!answered.includes(id)) {\n    answered.push(id);\n    localStorage.setItem('answeredQuestions', JSON.stringify(answered));\n    console.log(`Added to legacy format. New count: ${answered.length}`);\n  } else {\n    console.log(`Already in legacy format. Count remains: ${answered.length}`);\n  }\n\n  // Save to detailed format for performance tracking\n  if (answer) {\n    const detailed = getAnsweredQuestionsDetailed();\n    const existing = detailed.findIndex(item => item.id === id);\n    const newItem = {\n      id,\n      answer,\n      timestamp: Date.now()\n    };\n    if (existing >= 0) {\n      console.log(`Updating existing entry at index ${existing}:`, detailed[existing], '->', newItem);\n      detailed[existing] = newItem;\n    } else {\n      console.log(`Adding new entry:`, newItem);\n      detailed.push(newItem);\n    }\n    localStorage.setItem('answeredQuestionsDetailed', JSON.stringify(detailed));\n    console.log(`Detailed storage updated. New count: ${detailed.length}`);\n\n    // Verify what we just saved\n    const saved = JSON.parse(localStorage.getItem('answeredQuestionsDetailed') || '[]');\n    console.log(`Verification - actually saved ${saved.length} items:`, saved.map(item => `${item.id}=\"${item.answer}\"`));\n  }\n};\nexport const clearProgress = () => {\n  localStorage.removeItem('answeredQuestions');\n  localStorage.removeItem('answeredQuestionsDetailed');\n  console.log('Progress cleared: removed both answeredQuestions and answeredQuestionsDetailed');\n};\nexport const debugProgress = () => {\n  console.log('=== PROGRESS STORAGE DEBUG ===');\n  const legacy = localStorage.getItem('answeredQuestions');\n  const detailed = localStorage.getItem('answeredQuestionsDetailed');\n  console.log('Legacy storage raw:', legacy);\n  console.log('Detailed storage raw:', detailed);\n  if (legacy) {\n    try {\n      const legacyParsed = JSON.parse(legacy);\n      console.log('Legacy parsed:', legacyParsed);\n      console.log('Legacy count:', legacyParsed.length);\n    } catch (e) {\n      console.error('Error parsing legacy:', e);\n    }\n  }\n  if (detailed) {\n    try {\n      const detailedParsed = JSON.parse(detailed);\n      console.log('Detailed parsed:', detailedParsed);\n      console.log('Detailed count:', detailedParsed.length);\n    } catch (e) {\n      console.error('Error parsing detailed:', e);\n    }\n  }\n  const map = getAnsweredQuestionsMap();\n  console.log('Generated map:', map);\n  console.log('Map keys count:', Object.keys(map).length);\n  return {\n    legacy,\n    detailed,\n    map\n  };\n};\n\n// Clean up any duplicate entries in detailed storage\nexport const cleanupDuplicates = () => {\n  console.log('Starting cleanup of duplicate entries...');\n  const detailed = getAnsweredQuestionsDetailed();\n  console.log('Original count:', detailed.length);\n\n  // Create a map to keep only the latest entry for each ID\n  const latestEntries = {};\n  detailed.forEach(item => {\n    if (!latestEntries[item.id] || item.timestamp > latestEntries[item.id].timestamp) {\n      latestEntries[item.id] = item;\n    }\n  });\n\n  // Convert back to array\n  const cleanedArray = Object.values(latestEntries);\n  console.log('Cleaned count:', cleanedArray.length);\n  console.log('Removed duplicates:', detailed.length - cleanedArray.length);\n  if (cleanedArray.length !== detailed.length) {\n    localStorage.setItem('answeredQuestionsDetailed', JSON.stringify(cleanedArray));\n    console.log('Cleanup complete. Storage updated.');\n    return {\n      removed: detailed.length - cleanedArray.length,\n      cleaned: cleanedArray\n    };\n  } else {\n    console.log('No duplicates found.');\n    return {\n      removed: 0,\n      cleaned: cleanedArray\n    };\n  }\n};\n\n// Verify the integrity of progress data\nexport const verifyProgressIntegrity = () => {\n  console.log('=== PROGRESS INTEGRITY CHECK ===');\n  const legacy = getAnsweredQuestions();\n  const detailed = getAnsweredQuestionsDetailed();\n  const map = getAnsweredQuestionsMap();\n  console.log('1. Raw counts:');\n  console.log('   Legacy:', legacy.length);\n  console.log('   Detailed:', detailed.length);\n  console.log('   Map:', Object.keys(map).length);\n\n  // Check for duplicates in detailed\n  const detailedIds = detailed.map(item => item.id);\n  const uniqueDetailedIds = Array.from(new Set(detailedIds));\n  const duplicatesCount = detailedIds.length - uniqueDetailedIds.length;\n  console.log('2. Duplicate analysis:');\n  console.log('   Detailed entries:', detailedIds.length);\n  console.log('   Unique IDs:', uniqueDetailedIds.length);\n  console.log('   Duplicates:', duplicatesCount);\n  if (duplicatesCount > 0) {\n    console.warn('⚠️  DUPLICATES DETECTED!');\n    // Find which IDs are duplicated\n    const counts = {};\n    detailedIds.forEach(id => {\n      counts[id] = (counts[id] || 0) + 1;\n    });\n    Object.entries(counts).forEach(([id, count]) => {\n      if (count > 1) {\n        console.log(`   ${id}: ${count} times`);\n      }\n    });\n  }\n\n  // Check consistency between formats\n  console.log('3. Consistency check:');\n  const expectedMapSize = uniqueDetailedIds.length;\n  const actualMapSize = Object.keys(map).length;\n  if (expectedMapSize === actualMapSize) {\n    console.log('   ✅ Map size matches unique detailed entries');\n  } else {\n    console.error(`   ❌ Map size mismatch: expected ${expectedMapSize}, got ${actualMapSize}`);\n  }\n  return {\n    legacy: legacy.length,\n    detailed: detailed.length,\n    unique: uniqueDetailedIds.length,\n    map: actualMapSize,\n    duplicates: duplicatesCount,\n    isConsistent: expectedMapSize === actualMapSize\n  };\n};","map":{"version":3,"names":["getAnsweredQuestions","data","localStorage","getItem","JSON","parse","getAnsweredQuestionsDetailed","getAnsweredQuestionsMap","detailed","map","forEach","item","id","answer","saveAnsweredQuestion","console","log","answered","includes","push","setItem","stringify","length","existing","findIndex","newItem","timestamp","Date","now","saved","clearProgress","removeItem","debugProgress","legacy","legacyParsed","e","error","detailedParsed","Object","keys","cleanupDuplicates","latestEntries","cleanedArray","values","removed","cleaned","verifyProgressIntegrity","detailedIds","uniqueDetailedIds","Array","from","Set","duplicatesCount","warn","counts","entries","count","expectedMapSize","actualMapSize","unique","duplicates","isConsistent"],"sources":["/Users/liamkrass/Documents/satProjectV2/sat-practice-app-1/frontend/src/utils/progressStorage.ts"],"sourcesContent":["// Utility for tracking answered questions and progress in localStorage\n\ninterface AnsweredQuestion {\n  id: string;\n  answer: string;\n  timestamp: number;\n}\n\nexport const getAnsweredQuestions = (): string[] => {\n  // Legacy format support\n  const data = localStorage.getItem('answeredQuestions');\n  return data ? JSON.parse(data) : [];\n};\n\nexport const getAnsweredQuestionsDetailed = (): AnsweredQuestion[] => {\n  const data = localStorage.getItem('answeredQuestionsDetailed');\n  return data ? JSON.parse(data) : [];\n};\n\nexport const getAnsweredQuestionsMap = (): { [id: string]: string } => {\n  const detailed = getAnsweredQuestionsDetailed();\n  const map: { [id: string]: string } = {};\n  detailed.forEach(item => {\n    map[item.id] = item.answer;\n  });\n  return map;\n};\n\nexport const saveAnsweredQuestion = (id: string, answer?: string) => {\n  console.log(`saveAnsweredQuestion called: id=\"${id}\", answer=\"${answer}\"`);\n  \n  // Save to legacy format for backward compatibility\n  const answered = getAnsweredQuestions();\n  if (!answered.includes(id)) {\n    answered.push(id);\n    localStorage.setItem('answeredQuestions', JSON.stringify(answered));\n    console.log(`Added to legacy format. New count: ${answered.length}`);\n  } else {\n    console.log(`Already in legacy format. Count remains: ${answered.length}`);\n  }\n  \n  // Save to detailed format for performance tracking\n  if (answer) {\n    const detailed = getAnsweredQuestionsDetailed();\n    const existing = detailed.findIndex(item => item.id === id);\n    const newItem: AnsweredQuestion = {\n      id,\n      answer,\n      timestamp: Date.now()\n    };\n    \n    if (existing >= 0) {\n      console.log(`Updating existing entry at index ${existing}:`, detailed[existing], '->', newItem);\n      detailed[existing] = newItem;\n    } else {\n      console.log(`Adding new entry:`, newItem);\n      detailed.push(newItem);\n    }\n    \n    localStorage.setItem('answeredQuestionsDetailed', JSON.stringify(detailed));\n    console.log(`Detailed storage updated. New count: ${detailed.length}`);\n    \n    // Verify what we just saved\n    const saved = JSON.parse(localStorage.getItem('answeredQuestionsDetailed') || '[]');\n    console.log(`Verification - actually saved ${saved.length} items:`, saved.map((item: AnsweredQuestion) => `${item.id}=\"${item.answer}\"`));\n  }\n};\n\nexport const clearProgress = () => {\n  localStorage.removeItem('answeredQuestions');\n  localStorage.removeItem('answeredQuestionsDetailed');\n  console.log('Progress cleared: removed both answeredQuestions and answeredQuestionsDetailed');\n};\n\nexport const debugProgress = () => {\n  console.log('=== PROGRESS STORAGE DEBUG ===');\n  const legacy = localStorage.getItem('answeredQuestions');\n  const detailed = localStorage.getItem('answeredQuestionsDetailed');\n  \n  console.log('Legacy storage raw:', legacy);\n  console.log('Detailed storage raw:', detailed);\n  \n  if (legacy) {\n    try {\n      const legacyParsed = JSON.parse(legacy);\n      console.log('Legacy parsed:', legacyParsed);\n      console.log('Legacy count:', legacyParsed.length);\n    } catch (e) {\n      console.error('Error parsing legacy:', e);\n    }\n  }\n  \n  if (detailed) {\n    try {\n      const detailedParsed = JSON.parse(detailed);\n      console.log('Detailed parsed:', detailedParsed);\n      console.log('Detailed count:', detailedParsed.length);\n    } catch (e) {\n      console.error('Error parsing detailed:', e);\n    }\n  }\n  \n  const map = getAnsweredQuestionsMap();\n  console.log('Generated map:', map);\n  console.log('Map keys count:', Object.keys(map).length);\n  \n  return { legacy, detailed, map };\n};\n\n// Clean up any duplicate entries in detailed storage\nexport const cleanupDuplicates = () => {\n  console.log('Starting cleanup of duplicate entries...');\n  \n  const detailed = getAnsweredQuestionsDetailed();\n  console.log('Original count:', detailed.length);\n  \n  // Create a map to keep only the latest entry for each ID\n  const latestEntries: { [id: string]: AnsweredQuestion } = {};\n  \n  detailed.forEach(item => {\n    if (!latestEntries[item.id] || item.timestamp > latestEntries[item.id].timestamp) {\n      latestEntries[item.id] = item;\n    }\n  });\n  \n  // Convert back to array\n  const cleanedArray = Object.values(latestEntries);\n  console.log('Cleaned count:', cleanedArray.length);\n  console.log('Removed duplicates:', detailed.length - cleanedArray.length);\n  \n  if (cleanedArray.length !== detailed.length) {\n    localStorage.setItem('answeredQuestionsDetailed', JSON.stringify(cleanedArray));\n    console.log('Cleanup complete. Storage updated.');\n    return { removed: detailed.length - cleanedArray.length, cleaned: cleanedArray };\n  } else {\n    console.log('No duplicates found.');\n    return { removed: 0, cleaned: cleanedArray };\n  }\n};\n\n// Verify the integrity of progress data\nexport const verifyProgressIntegrity = () => {\n  console.log('=== PROGRESS INTEGRITY CHECK ===');\n  \n  const legacy = getAnsweredQuestions();\n  const detailed = getAnsweredQuestionsDetailed();\n  const map = getAnsweredQuestionsMap();\n  \n  console.log('1. Raw counts:');\n  console.log('   Legacy:', legacy.length);\n  console.log('   Detailed:', detailed.length);\n  console.log('   Map:', Object.keys(map).length);\n  \n  // Check for duplicates in detailed\n  const detailedIds = detailed.map(item => item.id);\n  const uniqueDetailedIds = Array.from(new Set(detailedIds));\n  const duplicatesCount = detailedIds.length - uniqueDetailedIds.length;\n  \n  console.log('2. Duplicate analysis:');\n  console.log('   Detailed entries:', detailedIds.length);\n  console.log('   Unique IDs:', uniqueDetailedIds.length);\n  console.log('   Duplicates:', duplicatesCount);\n  \n  if (duplicatesCount > 0) {\n    console.warn('⚠️  DUPLICATES DETECTED!');\n    // Find which IDs are duplicated\n    const counts: { [id: string]: number } = {};\n    detailedIds.forEach(id => {\n      counts[id] = (counts[id] || 0) + 1;\n    });\n    Object.entries(counts).forEach(([id, count]) => {\n      if (count > 1) {\n        console.log(`   ${id}: ${count} times`);\n      }\n    });\n  }\n  \n  // Check consistency between formats\n  console.log('3. Consistency check:');\n  const expectedMapSize = uniqueDetailedIds.length;\n  const actualMapSize = Object.keys(map).length;\n  \n  if (expectedMapSize === actualMapSize) {\n    console.log('   ✅ Map size matches unique detailed entries');\n  } else {\n    console.error(`   ❌ Map size mismatch: expected ${expectedMapSize}, got ${actualMapSize}`);\n  }\n  \n  return {\n    legacy: legacy.length,\n    detailed: detailed.length,\n    unique: uniqueDetailedIds.length,\n    map: actualMapSize,\n    duplicates: duplicatesCount,\n    isConsistent: expectedMapSize === actualMapSize\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}