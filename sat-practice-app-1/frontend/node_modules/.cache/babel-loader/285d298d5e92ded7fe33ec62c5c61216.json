{"ast":null,"code":"// Main questions export combining all question sources\n// Generated: 2025-07-01\n\nimport { mathQuestions } from './mathQuestions';\n\n// Export all math questions as the primary source\nfunction shuffleArray(array) {\n  // Fisher-Yates shuffle\n  const arr = [...array];\n  for (let i = arr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n  return arr;\n}\nexport const satQuestions = shuffleArray(mathQuestions);\n\n// Export by category\nexport const mathQuestionsList = mathQuestions;\nexport const verbalQuestionsList = []; // To be populated later with verbal questions\n\n// Export by domain (from new TXT source)\nexport const algebraQuestions = mathQuestions.filter(q => q.domain === 'Algebra');\nexport const geometryQuestions = mathQuestions.filter(q => q.domain === 'Geometry and Trigonometry');\nexport const advancedMathQuestions = mathQuestions.filter(q => q.domain === 'Advanced Math');\nexport const problemSolvingQuestions = mathQuestions.filter(q => q.domain === 'Problem-Solving and Data Analysis');\nexport const additionalTopicsQuestions = mathQuestions.filter(q => q.domain === 'Additional Topics in Math');\n\n// Export by difficulty\nexport const easyQuestions = mathQuestions.filter(q => q.difficulty === 'easy');\nexport const mediumQuestions = mathQuestions.filter(q => q.difficulty === 'medium');\nexport const hardQuestions = mathQuestions.filter(q => q.difficulty === 'hard');\n\n// Utility functions\nexport const getQuestionsByCategory = category => {\n  return mathQuestions.filter(q => q.category === category);\n};\nexport const getQuestionsByDomain = domain => {\n  return mathQuestions.filter(q => q.domain === domain);\n};\nexport const getQuestionsByDifficulty = difficulty => {\n  return mathQuestions.filter(q => q.difficulty === difficulty);\n};\nexport const getRandomQuestions = (count, category, domain) => {\n  let pool = mathQuestions;\n  if (category) {\n    pool = pool.filter(q => q.category === category);\n  }\n  if (domain) {\n    pool = pool.filter(q => q.domain === domain);\n  }\n  const shuffled = [...pool].sort(() => Math.random() - 0.5);\n  return shuffled.slice(0, count);\n};\n\n// Updated statistics\nexport const questionStats = {\n  total: mathQuestions.length,\n  math: mathQuestions.filter(q => q.category === 'math').length,\n  verbal: mathQuestions.filter(q => q.category === 'verbal').length,\n  byDomain: {\n    algebra: algebraQuestions.length,\n    geometry: geometryQuestions.length,\n    advancedMath: advancedMathQuestions.length,\n    problemSolving: problemSolvingQuestions.length,\n    additionalTopics: additionalTopicsQuestions.length\n  },\n  byDifficulty: {\n    easy: easyQuestions.length,\n    medium: mediumQuestions.length,\n    hard: hardQuestions.length\n  },\n  source: 'College Board TXT Import'\n};\n\n// Legacy exports for backward compatibility\nexport const satMathQuestions = mathQuestions;\nexport default satQuestions;","map":{"version":3,"names":["mathQuestions","shuffleArray","array","arr","i","length","j","Math","floor","random","satQuestions","mathQuestionsList","verbalQuestionsList","algebraQuestions","filter","q","domain","geometryQuestions","advancedMathQuestions","problemSolvingQuestions","additionalTopicsQuestions","easyQuestions","difficulty","mediumQuestions","hardQuestions","getQuestionsByCategory","category","getQuestionsByDomain","getQuestionsByDifficulty","getRandomQuestions","count","pool","shuffled","sort","slice","questionStats","total","math","verbal","byDomain","algebra","geometry","advancedMath","problemSolving","additionalTopics","byDifficulty","easy","medium","hard","source","satMathQuestions"],"sources":["/Users/liamkrass/Documents/satProjectV2/sat-practice-app-1/frontend/src/data/satQuestions.ts"],"sourcesContent":["// Main questions export combining all question sources\n// Generated: 2025-07-01\n\nexport type { Question } from './mathQuestions';\nimport { mathQuestions, questionStats as mathStats } from './mathQuestions';\n\n// Export all math questions as the primary source\nfunction shuffleArray<T>(array: T[]): T[] {\n  // Fisher-Yates shuffle\n  const arr = [...array];\n  for (let i = arr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n  return arr;\n}\n\nexport const satQuestions = shuffleArray(mathQuestions);\n\n// Export by category\nexport const mathQuestionsList = mathQuestions;\nexport const verbalQuestionsList: any[] = []; // To be populated later with verbal questions\n\n// Export by domain (from new TXT source)\nexport const algebraQuestions = mathQuestions.filter(q => q.domain === 'Algebra');\nexport const geometryQuestions = mathQuestions.filter(q => q.domain === 'Geometry and Trigonometry');\nexport const advancedMathQuestions = mathQuestions.filter(q => q.domain === 'Advanced Math');\nexport const problemSolvingQuestions = mathQuestions.filter(q => q.domain === 'Problem-Solving and Data Analysis');\nexport const additionalTopicsQuestions = mathQuestions.filter(q => q.domain === 'Additional Topics in Math');\n\n// Export by difficulty\nexport const easyQuestions = mathQuestions.filter(q => q.difficulty === 'easy');\nexport const mediumQuestions = mathQuestions.filter(q => q.difficulty === 'medium');\nexport const hardQuestions = mathQuestions.filter(q => q.difficulty === 'hard');\n\n// Utility functions\nexport const getQuestionsByCategory = (category: 'math' | 'verbal') => {\n  return mathQuestions.filter(q => q.category === category);\n};\n\nexport const getQuestionsByDomain = (domain: string) => {\n  return mathQuestions.filter(q => q.domain === domain);\n};\n\nexport const getQuestionsByDifficulty = (difficulty: 'easy' | 'medium' | 'hard') => {\n  return mathQuestions.filter(q => q.difficulty === difficulty);\n};\n\nexport const getRandomQuestions = (count: number, category?: 'math' | 'verbal', domain?: string) => {\n  let pool = mathQuestions;\n  \n  if (category) {\n    pool = pool.filter(q => q.category === category);\n  }\n  \n  if (domain) {\n    pool = pool.filter(q => q.domain === domain);\n  }\n  \n  const shuffled = [...pool].sort(() => Math.random() - 0.5);\n  return shuffled.slice(0, count);\n};\n\n// Updated statistics\nexport const questionStats = {\n  total: mathQuestions.length,\n  math: mathQuestions.filter(q => q.category === 'math').length,\n  verbal: mathQuestions.filter(q => q.category === 'verbal').length,\n  byDomain: {\n    algebra: algebraQuestions.length,\n    geometry: geometryQuestions.length,\n    advancedMath: advancedMathQuestions.length,\n    problemSolving: problemSolvingQuestions.length,\n    additionalTopics: additionalTopicsQuestions.length\n  },\n  byDifficulty: {\n    easy: easyQuestions.length,\n    medium: mediumQuestions.length,\n    hard: hardQuestions.length\n  },\n  source: 'College Board TXT Import'\n};\n\n// Legacy exports for backward compatibility\nexport const satMathQuestions = mathQuestions;\nexport default satQuestions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}