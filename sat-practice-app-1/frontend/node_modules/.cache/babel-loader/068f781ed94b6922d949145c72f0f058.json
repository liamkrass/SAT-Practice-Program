{"ast":null,"code":"import _objectSpread from\"/Users/liamkrass/Documents/satProjectV2/sat-practice-app-1/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import QuestionDisplay from'../components/QuestionDisplay';import QuestionFilter from'../components/QuestionFilter';import ScoreSummary from'../components/ScoreSummary';import SkillBreakdown from'../components/SkillBreakdown';import QuestionStats from'../components/QuestionStats';import{satQuestions}from'../data/satQuestions';import{typography,applyTypography,textColors}from'../styles/typography';import{getAnsweredQuestions,saveAnsweredQuestion,clearProgress,cleanupDuplicates,debugProgress,verifyProgressIntegrity}from'../utils/progressStorage';import{getSavedBalance,saveBalance}from'../utils/balanceStorage';// Helper to normalize answers for comparison (top-level, so it's reused everywhere)\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const normalizeAnswer=answer=>{if(!answer)return'';return answer.replace(/^[A-D]\\)\\s*/,'').trim().toLowerCase();};// Robust answer checking: matches letter, full option, or text\nconst isAnswerCorrect=(selected,correct,options)=>{if(!selected||!correct)return false;const norm=s=>s.replace(/^[A-D]\\)?\\s*/,'').trim().toLowerCase();// If correct is a single letter (A/B/C/D), match by index\nif(/^[A-D]$/i.test(correct.trim())){const correctIdx='ABCD'.indexOf(correct.trim().toUpperCase());if(correctIdx>=0&&options[correctIdx]){return norm(selected)===norm(options[correctIdx])||selected.trim().toUpperCase()===correct.trim().toUpperCase();}}// If selected is a single letter, match by index\nif(/^[A-D]$/i.test(selected.trim())){const selIdx='ABCD'.indexOf(selected.trim().toUpperCase());if(selIdx>=0&&options[selIdx]){return norm(options[selIdx])===norm(correct)||selected.trim().toUpperCase()===correct.trim().toUpperCase();}}// Otherwise, compare normalized\nreturn norm(selected)===norm(correct);};const Practice=()=>{const[current,setCurrent]=useState(0);const[answers,setAnswers]=useState({});const[showResults,setShowResults]=useState(false);const[selectedDomains,setSelectedDomains]=useState([]);const[showQuestionFilter,setShowQuestionFilter]=useState(false);const[showQuestionStats,setShowQuestionStats]=useState(false);const[balance,setBalance]=useState(()=>getSavedBalance());const[resetFlag,setResetFlag]=useState(false);// Used to force re-filter after reset\n// Clean up any duplicates when component loads\nuseEffect(()=>{cleanupDuplicates();},[]);// Get questions based on selected domains and filter out answered\nconst getQuestions=()=>{let base=!selectedDomains.length?satQuestions:satQuestions.filter(q=>q.domain&&selectedDomains.includes(q.domain));const answered=getAnsweredQuestions();return base.filter(q=>!answered.includes(q.id));};const questions=getQuestions();// Safety check to ensure we have questions and valid current index\nif(!questions||questions.length===0){return/*#__PURE__*/_jsxs(\"div\",{style:{padding:'40px',textAlign:'center',maxWidth:'600px',margin:'0 auto'},children:[/*#__PURE__*/_jsx(\"h2\",{style:_objectSpread(_objectSpread({},applyTypography(typography.heading.lg)),{},{color:textColors.primary,marginBottom:16}),children:\"No Questions Available\"}),/*#__PURE__*/_jsx(\"p\",{style:_objectSpread(_objectSpread({},applyTypography(typography.body.lg)),{},{color:textColors.secondary,marginBottom:24}),children:selectedDomains.length>0?\"No questions found for \\\"\".concat(selectedDomains.join(', '),\"\\\".\"):\"No questions found for the selected criteria.\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>{setSelectedDomains([]);setCurrent(0);},style:_objectSpread({background:'linear-gradient(90deg, #6366f1 0%, #818cf8 100%)',color:textColors.white,border:'none',borderRadius:16,padding:'12px 28px',cursor:'pointer',boxShadow:'0 4px 16px rgba(99, 102, 241, 0.25)'},applyTypography(typography.ui.button.md)),children:\"Show All Questions\"})]});}// Ensure current index is within bounds\nif(current>=questions.length){setCurrent(0);return null;// Re-render with corrected index\n}const handleAnswer=selectedAnswer=>{const question=questions[current];if(!question){console.error('No question found at index',current);return;}// Use robust answer checking\nconst isCorrect=isAnswerCorrect(selectedAnswer,question.correctAnswer,question.options);if(isCorrect){setBalance(prev=>prev+100);}setAnswers(_objectSpread(_objectSpread({},answers),{},{[question.id]:selectedAnswer}));saveAnsweredQuestion(question.id,selectedAnswer);// Save progress with actual answer\nif(current<questions.length-1){setCurrent(current+1);}else{setShowResults(true);}};const handleDomainsChange=domains=>{setSelectedDomains(domains);setCurrent(0);setAnswers({});};// Handle balance changes from Plinko game\nconst handleEarn=amount=>{setBalance(prev=>prev+amount);};// Save balance to localStorage whenever it changes\nuseEffect(()=>{saveBalance(balance);},[balance]);// Calculate scores and breakdowns\nconst getScoreSummary=()=>{let overall=0,math=0,verbal=0;const skillBreakdown={};questions.forEach(q=>{if(isAnswerCorrect(answers[q.id],q.correctAnswer,q.options)){overall++;if(q.category==='math')math++;if(q.category==='verbal')verbal++;skillBreakdown[q.skill]=(skillBreakdown[q.skill]||0)+1;}});return{overall,math,verbal,skillBreakdown};};const resetPractice=()=>{setCurrent(0);setAnswers({});setShowResults(false);setBalance(0);// Reset balance when starting new practice\nclearProgress();// Clear localStorage progress\n// Also clear balance from localStorage\nsaveBalance(0);setResetFlag(f=>!f);// Force re-render to update filtered questions\n};if(showResults){const{overall,math,verbal,skillBreakdown}=getScoreSummary();return/*#__PURE__*/_jsxs(\"div\",{style:{padding:'20px',maxWidth:'800px',margin:'0 auto'},children:[/*#__PURE__*/_jsx(ScoreSummary,{overallScore:overall,mathScore:math,verbalScore:verbal,skillBreakdown:skillBreakdown}),/*#__PURE__*/_jsx(SkillBreakdown,{skills:Object.entries(skillBreakdown).map(_ref=>{let[name,score]=_ref;return{name,score,maxScore:questions.filter(q=>q.skill===name).length};})}),/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'20px',textAlign:'center'},children:[/*#__PURE__*/_jsx(\"button\",{onClick:resetPractice,style:_objectSpread({background:'linear-gradient(90deg,#6366f1 60%,#818cf8 100%)',color:textColors.white,border:'none',borderRadius:16,padding:'12px 28px',cursor:'pointer',boxShadow:'0 2px 16px #6366f133'},applyTypography(typography.ui.button.md)),children:\"Practice Again\"}),/*#__PURE__*/_jsx(\"button\",{onClick:resetPractice,style:_objectSpread({marginLeft:16,background:'linear-gradient(90deg,#f43f5e 60%,#fbbf24 100%)',color:textColors.white,border:'none',borderRadius:16,padding:'12px 28px',cursor:'pointer',boxShadow:'0 2px 16px #f43f5e33'},applyTypography(typography.ui.button.md)),children:\"Reset Progress\"})]})]});}// If no questions left, show completion message and reset option\nif(questions.length===0){return/*#__PURE__*/_jsxs(\"div\",{style:{padding:'40px',textAlign:'center',maxWidth:'600px',margin:'0 auto'},children:[/*#__PURE__*/_jsx(\"h2\",{style:_objectSpread(_objectSpread({},applyTypography(typography.heading.lg)),{},{color:textColors.primary,marginBottom:16}),children:\"All Questions Completed!\"}),/*#__PURE__*/_jsx(\"p\",{style:_objectSpread(_objectSpread({},applyTypography(typography.body.lg)),{},{color:textColors.secondary,marginBottom:24}),children:\"You've answered every available question. You can reset your progress to start over.\"}),/*#__PURE__*/_jsx(\"button\",{onClick:resetPractice,style:_objectSpread({background:'linear-gradient(90deg,#f43f5e 60%,#fbbf24 100%)',color:textColors.white,border:'none',borderRadius:16,padding:'12px 28px',cursor:'pointer',boxShadow:'0 4px 16px #f43f5e33'},applyTypography(typography.ui.button.md)),children:\"Reset Progress\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>{console.log('=== MANUAL DEBUG TRIGGER ===');debugProgress();verifyProgressIntegrity();cleanupDuplicates();},style:_objectSpread({marginLeft:'16px',background:'linear-gradient(90deg,#10b981 60%,#34d399 100%)',color:textColors.white,border:'none',borderRadius:16,padding:'12px 28px',cursor:'pointer',boxShadow:'0 4px 16px #10b98133'},applyTypography(typography.ui.button.md)),children:\"Debug Progress\"})]});}return/*#__PURE__*/_jsxs(\"div\",{style:{padding:'20px',position:'relative'},children:[/*#__PURE__*/_jsx(QuestionDisplay,{question:questions[current],onAnswer:handleAnswer,onSkip:()=>{// Skip to next question without saving answer\nif(current<questions.length-1){setCurrent(current+1);}else{setShowResults(true);}},questionNumber:current+1,totalQuestions:questions.length,onShowQuestionList:()=>setShowQuestionFilter(true),balance:balance,onEarn:handleEarn,answers:answers,allQuestions:satQuestions// Pass ALL questions for performance tracking\n}),showQuestionFilter&&/*#__PURE__*/_jsx(QuestionFilter,{selectedDomains:selectedDomains,onDomainsChange:handleDomainsChange,onClose:()=>setShowQuestionFilter(false),questions:satQuestions// Pass all questions for filter options\n}),showQuestionStats&&/*#__PURE__*/_jsx(\"div\",{style:{position:'fixed',top:0,left:0,right:0,bottom:0,backgroundColor:'rgba(0,0,0,0.5)',display:'flex',alignItems:'center',justifyContent:'center',zIndex:1000,padding:'20px'},children:/*#__PURE__*/_jsx(\"div\",{style:{maxHeight:'90vh',overflowY:'auto',width:'100%',maxWidth:'900px'},children:/*#__PURE__*/_jsx(QuestionStats,{onClose:()=>setShowQuestionStats(false)})})}),/*#__PURE__*/_jsxs(\"div\",{style:_objectSpread(_objectSpread({textAlign:'center',marginTop:'16px'},applyTypography(typography.body.md)),{},{color:textColors.secondary}),children:[\"Question \",current+1,\" of \",questions.length,questions[current].domain&&/*#__PURE__*/_jsx(\"span\",{style:_objectSpread({marginLeft:'12px',color:textColors.accent,textTransform:'capitalize'},applyTypography(typography.body.sm)),children:questions[current].domain}),selectedDomains.length>0&&/*#__PURE__*/_jsxs(\"span\",{style:{marginLeft:'8px',padding:'4px 8px',background:'linear-gradient(135deg, #10b981 0%, #34d399 100%)',color:textColors.white,borderRadius:8,fontSize:'12px',textTransform:'capitalize'},children:[selectedDomains.join(', '),\" Filter Active\"]})]})]});};export default Practice;","map":null,"metadata":{},"sourceType":"module"}