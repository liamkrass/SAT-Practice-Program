{"ast":null,"code":"var _jsxFileName = \"/Users/liamkrass/Documents/satProjectV2/sat-practice-app-1/frontend/src/pages/Practice.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport QuestionDisplay from '../components/QuestionDisplay';\nimport QuestionFilter from '../components/QuestionFilter';\nimport ScoreSummary from '../components/ScoreSummary';\nimport SkillBreakdown from '../components/SkillBreakdown';\nimport QuestionStats from '../components/QuestionStats';\nimport { satQuestions } from '../data/satQuestions';\nimport { typography, applyTypography, textColors } from '../styles/typography';\nimport { getAnsweredQuestions, saveAnsweredQuestion, clearProgress, cleanupDuplicates, debugProgress, verifyProgressIntegrity } from '../utils/progressStorage';\nimport { getSavedBalance, saveBalance } from '../utils/balanceStorage';\n\n// Helper to normalize answers for comparison (top-level, so it's reused everywhere)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst normalizeAnswer = answer => {\n  if (!answer) return '';\n  return answer.replace(/^[A-D]\\)\\s*/, '').trim().toLowerCase();\n};\n\n// Robust answer checking: matches letter, full option, or text\nconst isAnswerCorrect = (selected, correct, options) => {\n  if (!selected || !correct) return false;\n  const norm = s => s.replace(/^[A-D]\\)?\\s*/, '').trim().toLowerCase();\n  // If correct is a single letter (A/B/C/D), match by index\n  if (/^[A-D]$/i.test(correct.trim())) {\n    const correctIdx = 'ABCD'.indexOf(correct.trim().toUpperCase());\n    if (correctIdx >= 0 && options[correctIdx]) {\n      return norm(selected) === norm(options[correctIdx]) || selected.trim().toUpperCase() === correct.trim().toUpperCase();\n    }\n  }\n  // If selected is a single letter, match by index\n  if (/^[A-D]$/i.test(selected.trim())) {\n    const selIdx = 'ABCD'.indexOf(selected.trim().toUpperCase());\n    if (selIdx >= 0 && options[selIdx]) {\n      return norm(options[selIdx]) === norm(correct) || selected.trim().toUpperCase() === correct.trim().toUpperCase();\n    }\n  }\n  // Otherwise, compare normalized\n  return norm(selected) === norm(correct);\n};\nconst Practice = () => {\n  _s();\n  const [current, setCurrent] = useState(0);\n  const [answers, setAnswers] = useState({});\n  const [showResults, setShowResults] = useState(false);\n  const [selectedDomains, setSelectedDomains] = useState([]);\n  const [showQuestionFilter, setShowQuestionFilter] = useState(false);\n  const [showQuestionStats, setShowQuestionStats] = useState(false);\n  const [balance, setBalance] = useState(() => getSavedBalance());\n  const [resetFlag, setResetFlag] = useState(false); // Used to force re-filter after reset\n\n  // Clean up any duplicates when component loads\n  useEffect(() => {\n    cleanupDuplicates();\n  }, []);\n\n  // Get questions based on selected domains and filter out answered\n  const getQuestions = () => {\n    let base = !selectedDomains.length ? satQuestions : satQuestions.filter(q => q.domain && selectedDomains.includes(q.domain));\n    const answered = getAnsweredQuestions();\n    return base.filter(q => !answered.includes(q.id));\n  };\n  const questions = getQuestions();\n\n  // Safety check to ensure we have questions and valid current index\n  if (!questions || questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '40px',\n        textAlign: 'center',\n        maxWidth: '600px',\n        margin: '0 auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          ...applyTypography(typography.heading.lg),\n          color: textColors.primary,\n          marginBottom: 16\n        },\n        children: \"No Questions Available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          ...applyTypography(typography.body.lg),\n          color: textColors.secondary,\n          marginBottom: 24\n        },\n        children: selectedDomains.length > 0 ? `No questions found for \"${selectedDomains.join(', ')}\".` : `No questions found for the selected criteria.`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setSelectedDomains([]);\n          setCurrent(0);\n        },\n        style: {\n          background: 'linear-gradient(90deg, #6366f1 0%, #818cf8 100%)',\n          color: textColors.white,\n          border: 'none',\n          borderRadius: 16,\n          padding: '12px 28px',\n          cursor: 'pointer',\n          boxShadow: '0 4px 16px rgba(99, 102, 241, 0.25)',\n          ...applyTypography(typography.ui.button.md)\n        },\n        children: \"Show All Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Ensure current index is within bounds\n  if (current >= questions.length) {\n    setCurrent(0);\n    return null; // Re-render with corrected index\n  }\n  const handleAnswer = selectedAnswer => {\n    const question = questions[current];\n    if (!question) {\n      console.error('No question found at index', current);\n      return;\n    }\n    // Use robust answer checking\n    const isCorrect = isAnswerCorrect(selectedAnswer, question.correctAnswer, question.options);\n    if (isCorrect) {\n      setBalance(prev => prev + 100);\n    }\n    setAnswers({\n      ...answers,\n      [question.id]: selectedAnswer\n    });\n    saveAnsweredQuestion(question.id, selectedAnswer); // Save progress with actual answer\n    if (current < questions.length - 1) {\n      setCurrent(current + 1);\n    } else {\n      setShowResults(true);\n    }\n  };\n  const handleDomainsChange = domains => {\n    setSelectedDomains(domains);\n    setCurrent(0);\n    setAnswers({});\n  };\n\n  // Handle balance changes from Plinko game\n  const handleEarn = amount => {\n    setBalance(prev => prev + amount);\n  };\n\n  // Save balance to localStorage whenever it changes\n  useEffect(() => {\n    saveBalance(balance);\n  }, [balance]);\n\n  // Calculate scores and breakdowns\n  const getScoreSummary = () => {\n    let overall = 0,\n      math = 0,\n      verbal = 0;\n    const skillBreakdown = {};\n    questions.forEach(q => {\n      if (isAnswerCorrect(answers[q.id], q.correctAnswer, q.options)) {\n        overall++;\n        if (q.category === 'math') math++;\n        if (q.category === 'verbal') verbal++;\n        skillBreakdown[q.skill] = (skillBreakdown[q.skill] || 0) + 1;\n      }\n    });\n    return {\n      overall,\n      math,\n      verbal,\n      skillBreakdown\n    };\n  };\n  const resetPractice = () => {\n    setCurrent(0);\n    setAnswers({});\n    setShowResults(false);\n    setBalance(0); // Reset balance when starting new practice\n    clearProgress(); // Clear localStorage progress\n    // Also clear balance from localStorage\n    saveBalance(0);\n    setResetFlag(f => !f); // Force re-render to update filtered questions\n    window.location.reload(); // Refresh the page after reset\n  };\n  if (showResults) {\n    const {\n      overall,\n      math,\n      verbal,\n      skillBreakdown\n    } = getScoreSummary();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px',\n        maxWidth: '800px',\n        margin: '0 auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(ScoreSummary, {\n        overallScore: overall,\n        mathScore: math,\n        verbalScore: verbal,\n        skillBreakdown: skillBreakdown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SkillBreakdown, {\n        skills: Object.entries(skillBreakdown).map(([name, score]) => ({\n          name,\n          score,\n          maxScore: questions.filter(q => q.skill === name).length\n        }))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '20px',\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetPractice,\n          style: {\n            background: 'linear-gradient(90deg,#6366f1 60%,#818cf8 100%)',\n            color: textColors.white,\n            border: 'none',\n            borderRadius: 16,\n            padding: '12px 28px',\n            cursor: 'pointer',\n            boxShadow: '0 2px 16px #6366f133',\n            ...applyTypography(typography.ui.button.md)\n          },\n          children: \"Practice Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetPractice,\n          style: {\n            marginLeft: 16,\n            background: 'linear-gradient(90deg,#f43f5e 60%,#fbbf24 100%)',\n            color: textColors.white,\n            border: 'none',\n            borderRadius: 16,\n            padding: '12px 28px',\n            cursor: 'pointer',\n            boxShadow: '0 2px 16px #f43f5e33',\n            ...applyTypography(typography.ui.button.md)\n          },\n          children: \"Reset Progress\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this);\n  }\n\n  // If no questions left, show completion message and reset option\n  if (questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '40px',\n        textAlign: 'center',\n        maxWidth: '600px',\n        margin: '0 auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          ...applyTypography(typography.heading.lg),\n          color: textColors.primary,\n          marginBottom: 16\n        },\n        children: \"All Questions Completed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          ...applyTypography(typography.body.lg),\n          color: textColors.secondary,\n          marginBottom: 24\n        },\n        children: \"You've answered every available question. You can reset your progress to start over.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetPractice,\n        style: {\n          background: 'linear-gradient(90deg,#f43f5e 60%,#fbbf24 100%)',\n          color: textColors.white,\n          border: 'none',\n          borderRadius: 16,\n          padding: '12px 28px',\n          cursor: 'pointer',\n          boxShadow: '0 4px 16px #f43f5e33',\n          ...applyTypography(typography.ui.button.md)\n        },\n        children: \"Reset Progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          console.log('=== MANUAL DEBUG TRIGGER ===');\n          debugProgress();\n          verifyProgressIntegrity();\n          cleanupDuplicates();\n        },\n        style: {\n          marginLeft: '16px',\n          background: 'linear-gradient(90deg,#10b981 60%,#34d399 100%)',\n          color: textColors.white,\n          border: 'none',\n          borderRadius: 16,\n          padding: '12px 28px',\n          cursor: 'pointer',\n          boxShadow: '0 4px 16px #10b98133',\n          ...applyTypography(typography.ui.button.md)\n        },\n        children: \"Debug Progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(QuestionDisplay, {\n      question: questions[current],\n      onAnswer: handleAnswer,\n      onSkip: () => {\n        // Skip to next question without saving answer\n        if (current < questions.length - 1) {\n          setCurrent(current + 1);\n        } else {\n          setShowResults(true);\n        }\n      },\n      questionNumber: current + 1,\n      totalQuestions: questions.length,\n      onShowQuestionList: () => setShowQuestionFilter(true),\n      balance: balance,\n      onEarn: handleEarn,\n      answers: answers,\n      allQuestions: satQuestions // Pass ALL questions for performance tracking\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this), showQuestionFilter && /*#__PURE__*/_jsxDEV(QuestionFilter, {\n      selectedDomains: selectedDomains,\n      onDomainsChange: handleDomainsChange,\n      onClose: () => setShowQuestionFilter(false),\n      questions: satQuestions // Pass all questions for filter options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 9\n    }, this), showQuestionStats && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        backgroundColor: 'rgba(0,0,0,0.5)',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        zIndex: 1000,\n        padding: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          maxHeight: '90vh',\n          overflowY: 'auto',\n          width: '100%',\n          maxWidth: '900px'\n        },\n        children: /*#__PURE__*/_jsxDEV(QuestionStats, {\n          onClose: () => setShowQuestionStats(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginTop: '16px',\n        ...applyTypography(typography.body.md),\n        color: textColors.secondary\n      },\n      children: [\"Question \", current + 1, \" of \", questions.length, questions[current].domain && /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          marginLeft: '12px',\n          color: textColors.accent,\n          textTransform: 'capitalize',\n          ...applyTypography(typography.body.sm)\n        },\n        children: questions[current].domain\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 11\n      }, this), selectedDomains.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          marginLeft: '8px',\n          padding: '4px 8px',\n          background: 'linear-gradient(135deg, #10b981 0%, #34d399 100%)',\n          color: textColors.white,\n          borderRadius: 8,\n          fontSize: '12px',\n          textTransform: 'capitalize'\n        },\n        children: [selectedDomains.join(', '), \" Filter Active\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 278,\n    columnNumber: 5\n  }, this);\n};\n_s(Practice, \"dqxQeJSsGZgKORYAzmIsmEYqKJ8=\");\n_c = Practice;\nexport default Practice;\nvar _c;\n$RefreshReg$(_c, \"Practice\");","map":{"version":3,"names":["React","useState","useEffect","QuestionDisplay","QuestionFilter","ScoreSummary","SkillBreakdown","QuestionStats","satQuestions","typography","applyTypography","textColors","getAnsweredQuestions","saveAnsweredQuestion","clearProgress","cleanupDuplicates","debugProgress","verifyProgressIntegrity","getSavedBalance","saveBalance","jsxDEV","_jsxDEV","normalizeAnswer","answer","replace","trim","toLowerCase","isAnswerCorrect","selected","correct","options","norm","s","test","correctIdx","indexOf","toUpperCase","selIdx","Practice","_s","current","setCurrent","answers","setAnswers","showResults","setShowResults","selectedDomains","setSelectedDomains","showQuestionFilter","setShowQuestionFilter","showQuestionStats","setShowQuestionStats","balance","setBalance","resetFlag","setResetFlag","getQuestions","base","length","filter","q","domain","includes","answered","id","questions","style","padding","textAlign","maxWidth","margin","children","heading","lg","color","primary","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","body","secondary","join","onClick","background","white","border","borderRadius","cursor","boxShadow","ui","button","md","handleAnswer","selectedAnswer","question","console","error","isCorrect","correctAnswer","prev","handleDomainsChange","domains","handleEarn","amount","getScoreSummary","overall","math","verbal","skillBreakdown","forEach","category","skill","resetPractice","f","window","location","reload","overallScore","mathScore","verbalScore","skills","Object","entries","map","name","score","maxScore","marginTop","marginLeft","log","position","onAnswer","onSkip","questionNumber","totalQuestions","onShowQuestionList","onEarn","allQuestions","onDomainsChange","onClose","top","left","right","bottom","backgroundColor","display","alignItems","justifyContent","zIndex","maxHeight","overflowY","width","accent","textTransform","sm","fontSize","_c","$RefreshReg$"],"sources":["/Users/liamkrass/Documents/satProjectV2/sat-practice-app-1/frontend/src/pages/Practice.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport QuestionDisplay from '../components/QuestionDisplay';\nimport QuestionFilter from '../components/QuestionFilter';\nimport ScoreSummary from '../components/ScoreSummary';\nimport SkillBreakdown from '../components/SkillBreakdown';\nimport QuestionStats from '../components/QuestionStats';\nimport { satQuestions, getQuestionsByCategory, getQuestionsByDomain } from '../data/satQuestions';\nimport { typography, applyTypography, textColors } from '../styles/typography';\nimport { getAnsweredQuestions, saveAnsweredQuestion, clearProgress, cleanupDuplicates, debugProgress, verifyProgressIntegrity } from '../utils/progressStorage';\nimport { getSavedBalance, saveBalance } from '../utils/balanceStorage';\n\n// Helper to normalize answers for comparison (top-level, so it's reused everywhere)\nconst normalizeAnswer = (answer: string) => {\n  if (!answer) return '';\n  return answer.replace(/^[A-D]\\)\\s*/, '').trim().toLowerCase();\n};\n\n// Robust answer checking: matches letter, full option, or text\nconst isAnswerCorrect = (selected: string, correct: string, options: string[]) => {\n  if (!selected || !correct) return false;\n  const norm = (s: string) => s.replace(/^[A-D]\\)?\\s*/, '').trim().toLowerCase();\n  // If correct is a single letter (A/B/C/D), match by index\n  if (/^[A-D]$/i.test(correct.trim())) {\n    const correctIdx = 'ABCD'.indexOf(correct.trim().toUpperCase());\n    if (correctIdx >= 0 && options[correctIdx]) {\n      return norm(selected) === norm(options[correctIdx]) || selected.trim().toUpperCase() === correct.trim().toUpperCase();\n    }\n  }\n  // If selected is a single letter, match by index\n  if (/^[A-D]$/i.test(selected.trim())) {\n    const selIdx = 'ABCD'.indexOf(selected.trim().toUpperCase());\n    if (selIdx >= 0 && options[selIdx]) {\n      return norm(options[selIdx]) === norm(correct) || selected.trim().toUpperCase() === correct.trim().toUpperCase();\n    }\n  }\n  // Otherwise, compare normalized\n  return norm(selected) === norm(correct);\n};\n\nconst Practice: React.FC = () => {\n  const [current, setCurrent] = useState(0);\n  const [answers, setAnswers] = useState<{ [id: string]: string }>({});\n  const [showResults, setShowResults] = useState(false);\n  const [selectedDomains, setSelectedDomains] = useState<string[]>([]);\n  const [showQuestionFilter, setShowQuestionFilter] = useState(false);\n  const [showQuestionStats, setShowQuestionStats] = useState(false);\n  const [balance, setBalance] = useState(() => getSavedBalance());\n  const [resetFlag, setResetFlag] = useState(false); // Used to force re-filter after reset\n\n  // Clean up any duplicates when component loads\n  useEffect(() => {\n    cleanupDuplicates();\n  }, []);\n\n  // Get questions based on selected domains and filter out answered\n  const getQuestions = () => {\n    let base = !selectedDomains.length ? satQuestions : satQuestions.filter(q => q.domain && selectedDomains.includes(q.domain));\n    const answered = getAnsweredQuestions();\n    return base.filter(q => !answered.includes(q.id));\n  };\n  const questions = getQuestions();\n\n  // Safety check to ensure we have questions and valid current index\n  if (!questions || questions.length === 0) {\n    return (\n      <div style={{ \n        padding: '40px', \n        textAlign: 'center',\n        maxWidth: '600px',\n        margin: '0 auto'\n      }}>\n        <h2 style={{\n          ...applyTypography(typography.heading.lg),\n          color: textColors.primary,\n          marginBottom: 16\n        }}>\n          No Questions Available\n        </h2>\n        <p style={{\n          ...applyTypography(typography.body.lg),\n          color: textColors.secondary,\n          marginBottom: 24\n        }}>\n          {selectedDomains.length > 0 \n            ? `No questions found for \"${selectedDomains.join(', ')}\".`\n            : `No questions found for the selected criteria.`\n          }\n        </p>\n        <button \n          onClick={() => {\n            setSelectedDomains([]);\n            setCurrent(0);\n          }}\n          style={{\n            background: 'linear-gradient(90deg, #6366f1 0%, #818cf8 100%)',\n            color: textColors.white,\n            border: 'none',\n            borderRadius: 16,\n            padding: '12px 28px',\n            cursor: 'pointer',\n            boxShadow: '0 4px 16px rgba(99, 102, 241, 0.25)',\n            ...applyTypography(typography.ui.button.md)\n          }}\n        >\n          Show All Questions\n        </button>\n      </div>\n    );\n  }\n\n  // Ensure current index is within bounds\n  if (current >= questions.length) {\n    setCurrent(0);\n    return null; // Re-render with corrected index\n  }\n\n  const handleAnswer = (selectedAnswer: string) => {\n    const question = questions[current];\n    if (!question) {\n      console.error('No question found at index', current);\n      return;\n    }\n    // Use robust answer checking\n    const isCorrect = isAnswerCorrect(selectedAnswer, question.correctAnswer, question.options);\n    if (isCorrect) {\n      setBalance(prev => prev + 100);\n    }\n    setAnswers({ ...answers, [question.id]: selectedAnswer });\n    saveAnsweredQuestion(question.id, selectedAnswer); // Save progress with actual answer\n    if (current < questions.length - 1) {\n      setCurrent(current + 1);\n    } else {\n      setShowResults(true);\n    }\n  };\n\n  const handleDomainsChange = (domains: string[]) => {\n    setSelectedDomains(domains);\n    setCurrent(0);\n    setAnswers({});\n  };\n\n  // Handle balance changes from Plinko game\n  const handleEarn = (amount: number) => {\n    setBalance(prev => prev + amount);\n  };\n\n  // Save balance to localStorage whenever it changes\n  useEffect(() => {\n    saveBalance(balance);\n  }, [balance]);\n\n  // Calculate scores and breakdowns\n  const getScoreSummary = () => {\n    let overall = 0, math = 0, verbal = 0;\n    const skillBreakdown: Record<string, number> = {};\n    questions.forEach(q => {\n      if (isAnswerCorrect(answers[q.id], q.correctAnswer, q.options)) {\n        overall++;\n        if (q.category === 'math') math++;\n        if (q.category === 'verbal') verbal++;\n        skillBreakdown[q.skill] = (skillBreakdown[q.skill] || 0) + 1;\n      }\n    });\n    return { overall, math, verbal, skillBreakdown };\n  };\n\n  const resetPractice = () => {\n    setCurrent(0);\n    setAnswers({});\n    setShowResults(false);\n    setBalance(0); // Reset balance when starting new practice\n    clearProgress(); // Clear localStorage progress\n    // Also clear balance from localStorage\n    saveBalance(0);\n    setResetFlag(f => !f); // Force re-render to update filtered questions\n    window.location.reload(); // Refresh the page after reset\n  };\n\n  if (showResults) {\n    const { overall, math, verbal, skillBreakdown } = getScoreSummary();\n    return (\n      <div style={{ padding: '20px', maxWidth: '800px', margin: '0 auto' }}>\n        <ScoreSummary overallScore={overall} mathScore={math} verbalScore={verbal} skillBreakdown={skillBreakdown} />\n        <SkillBreakdown skills={Object.entries(skillBreakdown).map(([name, score]) => ({ \n          name, \n          score, \n          maxScore: questions.filter(q => q.skill === name).length \n        }))} />\n        <div style={{ marginTop: '20px', textAlign: 'center' }}>\n          <button \n            onClick={resetPractice}\n            style={{\n              background: 'linear-gradient(90deg,#6366f1 60%,#818cf8 100%)',\n              color: textColors.white,\n              border: 'none',\n              borderRadius: 16,\n              padding: '12px 28px',\n              cursor: 'pointer',\n              boxShadow: '0 2px 16px #6366f133',\n              ...applyTypography(typography.ui.button.md)\n            }}\n          >\n            Practice Again\n          </button>\n          <button\n            onClick={resetPractice}\n            style={{\n              marginLeft: 16,\n              background: 'linear-gradient(90deg,#f43f5e 60%,#fbbf24 100%)',\n              color: textColors.white,\n              border: 'none',\n              borderRadius: 16,\n              padding: '12px 28px',\n              cursor: 'pointer',\n              boxShadow: '0 2px 16px #f43f5e33',\n              ...applyTypography(typography.ui.button.md)\n            }}\n          >\n            Reset Progress\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  // If no questions left, show completion message and reset option\n  if (questions.length === 0) {\n    return (\n      <div style={{ padding: '40px', textAlign: 'center', maxWidth: '600px', margin: '0 auto' }}>\n        <h2 style={{ ...applyTypography(typography.heading.lg), color: textColors.primary, marginBottom: 16 }}>\n          All Questions Completed!\n        </h2>\n        <p style={{ ...applyTypography(typography.body.lg), color: textColors.secondary, marginBottom: 24 }}>\n          You've answered every available question. You can reset your progress to start over.\n        </p>\n        <button\n          onClick={resetPractice}\n          style={{\n            background: 'linear-gradient(90deg,#f43f5e 60%,#fbbf24 100%)',\n            color: textColors.white,\n            border: 'none',\n            borderRadius: 16,\n            padding: '12px 28px',\n            cursor: 'pointer',\n            boxShadow: '0 4px 16px #f43f5e33',\n            ...applyTypography(typography.ui.button.md)\n          }}\n        >\n          Reset Progress\n        </button>\n        <button\n          onClick={() => {\n            console.log('=== MANUAL DEBUG TRIGGER ===');\n            debugProgress();\n            verifyProgressIntegrity();\n            cleanupDuplicates();\n          }}\n          style={{\n            marginLeft: '16px',\n            background: 'linear-gradient(90deg,#10b981 60%,#34d399 100%)',\n            color: textColors.white,\n            border: 'none',\n            borderRadius: 16,\n            padding: '12px 28px',\n            cursor: 'pointer',\n            boxShadow: '0 4px 16px #10b98133',\n            ...applyTypography(typography.ui.button.md)\n          }}\n        >\n          Debug Progress\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ padding: '20px', position: 'relative' }}>\n      <QuestionDisplay \n        question={questions[current]} \n        onAnswer={handleAnswer}\n        onSkip={() => {\n          // Skip to next question without saving answer\n          if (current < questions.length - 1) {\n            setCurrent(current + 1);\n          } else {\n            setShowResults(true);\n          }\n        }}\n        questionNumber={current + 1}\n        totalQuestions={questions.length}\n        onShowQuestionList={() => setShowQuestionFilter(true)}\n        balance={balance}\n        onEarn={handleEarn}\n        answers={answers}\n        allQuestions={satQuestions} // Pass ALL questions for performance tracking\n      />\n\n      {/* Question Filter Modal */}\n      {showQuestionFilter && (\n        <QuestionFilter\n          selectedDomains={selectedDomains}\n          onDomainsChange={handleDomainsChange}\n          onClose={() => setShowQuestionFilter(false)}\n          questions={satQuestions} // Pass all questions for filter options\n        />\n      )}\n      \n      {/* Question Stats Modal */}\n      {showQuestionStats && (\n        <div style={{\n          position: 'fixed',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          backgroundColor: 'rgba(0,0,0,0.5)',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          zIndex: 1000,\n          padding: '20px'\n        }}>\n          <div style={{\n            maxHeight: '90vh',\n            overflowY: 'auto',\n            width: '100%',\n            maxWidth: '900px'\n          }}>\n            <QuestionStats onClose={() => setShowQuestionStats(false)} />\n          </div>\n        </div>\n      )}\n      \n      <div style={{ \n        textAlign: 'center', \n        marginTop: '16px',\n        ...applyTypography(typography.body.md),\n        color: textColors.secondary\n      }}>\n        Question {current + 1} of {questions.length}\n        {questions[current].domain && (\n          <span style={{ \n            marginLeft: '12px', \n            color: textColors.accent,\n            textTransform: 'capitalize',\n            ...applyTypography(typography.body.sm)\n          }}>\n            {questions[current].domain}\n          </span>\n        )}\n        {selectedDomains.length > 0 && (\n          <span style={{ \n            marginLeft: '8px',\n            padding: '4px 8px',\n            background: 'linear-gradient(135deg, #10b981 0%, #34d399 100%)',\n            color: textColors.white,\n            borderRadius: 8,\n            fontSize: '12px',\n            textTransform: 'capitalize'\n          }}>\n            {selectedDomains.join(', ')} Filter Active\n          </span>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Practice;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}