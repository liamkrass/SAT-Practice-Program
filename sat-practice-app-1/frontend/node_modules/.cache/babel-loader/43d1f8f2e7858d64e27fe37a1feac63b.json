{"ast":null,"code":"// Utility for tracking answered questions and progress in localStorage\n\nexport const getAnsweredQuestions = () => {\n  // Legacy format support\n  const data = localStorage.getItem('answeredQuestions');\n  return data ? JSON.parse(data) : [];\n};\nexport const getAnsweredQuestionsDetailed = () => {\n  const data = localStorage.getItem('answeredQuestionsDetailed');\n  return data ? JSON.parse(data) : [];\n};\nexport const getAnsweredQuestionsMap = () => {\n  const detailed = getAnsweredQuestionsDetailed();\n  const map = {};\n  detailed.forEach(item => {\n    map[item.id] = item.answer;\n  });\n  return map;\n};\nexport const saveAnsweredQuestion = (id, answer) => {\n  // Save to legacy format for backward compatibility\n  const answered = getAnsweredQuestions();\n  if (!answered.includes(id)) {\n    answered.push(id);\n    localStorage.setItem('answeredQuestions', JSON.stringify(answered));\n  }\n\n  // Save to detailed format for performance tracking\n  if (answer) {\n    const detailed = getAnsweredQuestionsDetailed();\n    const existing = detailed.findIndex(item => item.id === id);\n    const newItem = {\n      id,\n      answer,\n      timestamp: Date.now()\n    };\n    if (existing >= 0) {\n      detailed[existing] = newItem;\n    } else {\n      detailed.push(newItem);\n    }\n    localStorage.setItem('answeredQuestionsDetailed', JSON.stringify(detailed));\n  }\n};\nexport const clearProgress = () => {\n  localStorage.removeItem('answeredQuestions');\n  localStorage.removeItem('answeredQuestionsDetailed');\n  console.log('Progress cleared: removed both answeredQuestions and answeredQuestionsDetailed');\n};\nexport const debugProgress = () => {\n  console.log('=== PROGRESS STORAGE DEBUG ===');\n  const legacy = localStorage.getItem('answeredQuestions');\n  const detailed = localStorage.getItem('answeredQuestionsDetailed');\n  console.log('Legacy storage raw:', legacy);\n  console.log('Detailed storage raw:', detailed);\n  if (legacy) {\n    try {\n      const legacyParsed = JSON.parse(legacy);\n      console.log('Legacy parsed:', legacyParsed);\n      console.log('Legacy count:', legacyParsed.length);\n    } catch (e) {\n      console.error('Error parsing legacy:', e);\n    }\n  }\n  if (detailed) {\n    try {\n      const detailedParsed = JSON.parse(detailed);\n      console.log('Detailed parsed:', detailedParsed);\n      console.log('Detailed count:', detailedParsed.length);\n    } catch (e) {\n      console.error('Error parsing detailed:', e);\n    }\n  }\n  const map = getAnsweredQuestionsMap();\n  console.log('Generated map:', map);\n  console.log('Map keys count:', Object.keys(map).length);\n  return {\n    legacy,\n    detailed,\n    map\n  };\n};","map":{"version":3,"names":["getAnsweredQuestions","data","localStorage","getItem","JSON","parse","getAnsweredQuestionsDetailed","getAnsweredQuestionsMap","detailed","map","forEach","item","id","answer","saveAnsweredQuestion","answered","includes","push","setItem","stringify","existing","findIndex","newItem","timestamp","Date","now","clearProgress","removeItem","console","log","debugProgress","legacy","legacyParsed","length","e","error","detailedParsed","Object","keys"],"sources":["/Users/liamkrass/Documents/satProjectV2/sat-practice-app-1/frontend/src/utils/progressStorage.ts"],"sourcesContent":["// Utility for tracking answered questions and progress in localStorage\n\ninterface AnsweredQuestion {\n  id: string;\n  answer: string;\n  timestamp: number;\n}\n\nexport const getAnsweredQuestions = (): string[] => {\n  // Legacy format support\n  const data = localStorage.getItem('answeredQuestions');\n  return data ? JSON.parse(data) : [];\n};\n\nexport const getAnsweredQuestionsDetailed = (): AnsweredQuestion[] => {\n  const data = localStorage.getItem('answeredQuestionsDetailed');\n  return data ? JSON.parse(data) : [];\n};\n\nexport const getAnsweredQuestionsMap = (): { [id: string]: string } => {\n  const detailed = getAnsweredQuestionsDetailed();\n  const map: { [id: string]: string } = {};\n  detailed.forEach(item => {\n    map[item.id] = item.answer;\n  });\n  return map;\n};\n\nexport const saveAnsweredQuestion = (id: string, answer?: string) => {\n  // Save to legacy format for backward compatibility\n  const answered = getAnsweredQuestions();\n  if (!answered.includes(id)) {\n    answered.push(id);\n    localStorage.setItem('answeredQuestions', JSON.stringify(answered));\n  }\n  \n  // Save to detailed format for performance tracking\n  if (answer) {\n    const detailed = getAnsweredQuestionsDetailed();\n    const existing = detailed.findIndex(item => item.id === id);\n    const newItem: AnsweredQuestion = {\n      id,\n      answer,\n      timestamp: Date.now()\n    };\n    \n    if (existing >= 0) {\n      detailed[existing] = newItem;\n    } else {\n      detailed.push(newItem);\n    }\n    \n    localStorage.setItem('answeredQuestionsDetailed', JSON.stringify(detailed));\n  }\n};\n\nexport const clearProgress = () => {\n  localStorage.removeItem('answeredQuestions');\n  localStorage.removeItem('answeredQuestionsDetailed');\n  console.log('Progress cleared: removed both answeredQuestions and answeredQuestionsDetailed');\n};\n\nexport const debugProgress = () => {\n  console.log('=== PROGRESS STORAGE DEBUG ===');\n  const legacy = localStorage.getItem('answeredQuestions');\n  const detailed = localStorage.getItem('answeredQuestionsDetailed');\n  \n  console.log('Legacy storage raw:', legacy);\n  console.log('Detailed storage raw:', detailed);\n  \n  if (legacy) {\n    try {\n      const legacyParsed = JSON.parse(legacy);\n      console.log('Legacy parsed:', legacyParsed);\n      console.log('Legacy count:', legacyParsed.length);\n    } catch (e) {\n      console.error('Error parsing legacy:', e);\n    }\n  }\n  \n  if (detailed) {\n    try {\n      const detailedParsed = JSON.parse(detailed);\n      console.log('Detailed parsed:', detailedParsed);\n      console.log('Detailed count:', detailedParsed.length);\n    } catch (e) {\n      console.error('Error parsing detailed:', e);\n    }\n  }\n  \n  const map = getAnsweredQuestionsMap();\n  console.log('Generated map:', map);\n  console.log('Map keys count:', Object.keys(map).length);\n  \n  return { legacy, detailed, map };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}